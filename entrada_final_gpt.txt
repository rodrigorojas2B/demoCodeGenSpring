--- HISTORIA DE USUARIO ---
id: HDU-EMP-001
titulo: Prevenir eliminación de empleadas
actor: Administrador del sistema
descripcion: 
  Como administrador del sistema,
  quiero que no se permita eliminar empleados de género femenino,
  para cumplir con la normativa interna de no eliminar registros históricos sensibles.
criterios_aceptacion:
  - Si se intenta  eliminar un empleado con género "Femenino", se debe lanzar una excepción o retornar un error controlado.
  - Si el empleado es de género "Masculino" u otro valor, se permite la eliminación normal.
  - El método de eliminación actual debe ser modificado para incluir esta validación.
  - No debe eliminarse ninguna lógica existente que ya esté implementada en ese método.
  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.
  - La modificación debe estar  delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.

id: HDU-EMP-002
titulo: Empleados nacidos antes del 2000
actor: Administrador del sistema
descripcion: 
  Como administrador  del sistema
  quiero obtener una lista de empleados que hayan nacido antes del año 2000
  para poder segmentar a los empleados  por generaciones y aplicar políticas diferenciadas
criterios_aceptacion:
  - Se debe crear un nuevo  end-point para esta consulta
  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.
  - La modificación debe estar delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.

id: HDU-EMP-003
titulo: Empleados ordenados por posición
actor: Administrador del sistema
descripcion: 
  Como administrador del sistema
  quiero obtener una lista de empleados agrupados por posición
  para poder segmentar a contar cuantos empledos hay en cada posición
criterios_aceptacion:
  - Se debe crear un nuevo end-point para esta consulta
  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.
  - La modificación debe estar delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.

--- DIAGNÓSTICO Y PLAN DE CLASES ---
--- ANÁLISIS DE CLASES EXISTENTES ---

| Clase Java | Package | Clasificación | Motivo |
|------------|---------|----------------|--------|
| Employee | test.core.api.model | REUTILIZABLE-AS-IS | Contiene atributos necesarios para las historias de usuario |
| EmployeeRepository | test.core.api.repository | REUTILIZABLE-AS-IS | Se necesita para realizar operaciones CRUD en la base de datos |
| EmployeeCoreApiApplication | test.core.api | REUTILIZABLE-AS-IS | Clase principal de la aplicación |
| EmployeeService | N/A | NUEVA | Se necesita para implementar la lógica de negocio |
| EmployeeController | N/A | NUEVA | Se necesita para exponer los endpoints requeridos |
| EmployeeServiceException | N/A | NUEVA | Se necesita para manejar excepciones personalizadas |
| EmployeeServiceTest | N/A | NUEVA | Se necesita para realizar pruebas unitarias |
| EmployeeControllerTest | N/A | NUEVA | Se necesita para realizar pruebas de integración |

--- INSTRUCCIONES DE MODIFICACIÓN ---
1. Crear la clase `EmployeeService` en el paquete `test.core.api.service` con los métodos `deleteEmployee(Long id)`, `getEmployeesBornBefore2000()`, y `getEmployeesGroupedByPosition()`.
2. Modificar el método `deleteEmployee(Long id)` para lanzar una excepción `EmployeeServiceException` si el empleado a eliminar es de género femenino.
3. Crear la clase `EmployeeController` en el paquete `test.core.api.controller` con los endpoints `deleteEmployee(Long id)`, `getEmployeesBornBefore2000()`, y `getEmployeesGroupedByPosition()`.
4. Crear la clase `EmployeeServiceException` en el paquete `test.core.api.exception` para manejar las excepciones personalizadas.
5. Crear la clase `EmployeeServiceTest` en el paquete `test.core.api.service` para realizar pruebas unitarias en los métodos de `EmployeeService`.
6. Crear la clase `EmployeeControllerTest` en el paquete `test.core.api.controller` para realizar pruebas de integración en los endpoints de `EmployeeController`.

--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---
- Modifica únicamente las clases marcadas como MODIFICABLE.
- Crea nuevas clases solo si están indicadas como NUEVA.
- No cambies de paquete ni nombre de clase.
- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.
- No omitas lógica existente.
- Cada clase debe comenzar con `package ...`.
- Devuelve únicamente clases y tests JUnit 5 válidos.
- No incluyas explicaciones ni comentarios adicionales.
- Si una clase existente implementa una interfaz, o hereda de otra clase, debes mantener esa declaración `implements o extends ...`.
- No elimines implementaciones de interfaces ya declaradas.
- La firma de las clases y métodos debe mantenerse sin cambio a menos que la nueva funcionalidad lo requiera
- Si se crea una llamada a un método de la clase modificada asegúrate que ese método exista en la clase
- Si se crea una llamada a un método de otra clase asegúrate que ese método exista en la clase o créalo de ser necesario
- Asegurate que el el código generado sea compilable, corríjelo hasta que lo sea
- Nunca uses el método stream() u otros métodos que pueden ser ambiguos entre versiones de Java.
- Siempre importa las clases que uses dentro de otra clase, valida siempre que clase clase utilizada tenga su import correspondiente.
- Cuando asignes el resultado de un método a una variable siempre los tipos de la variable y el método deben ser compatibles.  Por ejemplo, no trates de asignar un método que retorna Iterable a una variable de tipo List.
