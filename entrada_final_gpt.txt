--- HISTORIA DE USUARIO ---
id: HDU-EMP-003
titulo: Prevenir eliminación de empleadas
actor: Administrador del sistema
descripcion: >
  Como administrador del sistema,
  quiero que no se permita eliminar empleados de género femenino,
  para cumplir con la normativa  interna de no eliminar registros históricos sensibles.

criterios_aceptacion:
  - Si se intenta eliminar un empleado con género "Femenino", se debe lanzar una excepción o retornar un error controlado.
  - Si el empleado es de género "Masculino" u otro valor, se permite la eliminación normal.
  - El método de eliminación actual debe ser modificado para incluir esta validación.
  - No debe eliminarse ninguna lógica existente que ya esté implementada en ese método.
  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.
  - La modificación debe estar delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.


--- DIAGNÓSTICO Y PLAN DE CLASES ---
--- ANÁLISIS DE CLASES EXISTENTES ---

| Clase Java | Package | Clasificación | Motivo |
|------------|---------|----------------|--------|
| Employee | test.core.api.model | REUTILIZABLE-AS-IS | Contiene atributo `gender` |
| EmployeeRepository | test.core.api.repository | REUTILIZABLE-AS-IS | Se utiliza para operaciones CRUD en la base de datos |
| EmployeeCoreApiApplication | test.core.api | REUTILIZABLE-AS-IS | Clase principal de la aplicación |
| EmployeeService | (No existe aún) | NUEVA | Se necesita para implementar la lógica de negocio |
| CannotDeleteFemaleEmployeeException | (No existe aún) | NUEVA | Se necesita para lanzar una excepción específica cuando se intenta eliminar un empleado femenino |

--- PLAN DE MODIFICACIÓN ---

1. Crear una nueva interfaz `EmployeeService` en el paquete `test.core.api.service`. Esta interfaz debe tener un método `deleteEmployee(Long id)`.

2. Crear una nueva clase `EmployeeServiceImpl` en el paquete `test.core.api.service.impl` que implemente la interfaz `EmployeeService`. En el método `deleteEmployee(Long id)`, se debe recuperar el empleado por su id utilizando `EmployeeRepository`. Luego, se debe verificar el género del empleado. Si es femenino, se debe lanzar una nueva excepción `CannotDeleteFemaleEmployeeException`. Si no es femenino, se puede eliminar el empleado utilizando `EmployeeRepository`.

3. Crear una nueva clase de excepción `CannotDeleteFemaleEmployeeException` en el paquete `test.core.api.exception`. Esta excepción debe extender `RuntimeException` y tener un constructor que acepte un mensaje de error.

4. Crear una nueva clase `EmployeeServiceTest` en el paquete `test.core.api.service.impl` para probar la lógica de `EmployeeServiceImpl`. Se deben crear pruebas para verificar que se lanza la excepción `CannotDeleteFemaleEmployeeException` cuando se intenta eliminar un empleado femenino y que se puede eliminar un empleado no femenino.

5. Modificar la clase `EmployeeCoreApiApplication` para inyectar `EmployeeService` y utilizarlo para eliminar empleados en lugar de `EmployeeRepository` directamente.

--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---
- Modifica únicamente las clases marcadas como MODIFICABLE.
- Crea nuevas clases solo si están indicadas como NUEVA.
- No cambies de paquete ni nombre de clase.
- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.
- No omitas lógica existente.
- Cada clase debe comenzar con `package ...`.
- Devuelve únicamente clases y tests JUnit 5 válidos.
- No incluyas explicaciones ni comentarios adicionales.
- Si una clase existente implementa una interfaz, o hereda de otra clase, debes mantener esa declaración `implements o extends ...`.
- No elimines implementaciones de interfaces ya declaradas.
- La firma de las clases y métodos debe mantenerse sin cambio a menos que la nueva funcionalidad lo requiera

