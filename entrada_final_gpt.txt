--- HISTORIA DE USUARIO ---
id: HDU-EMP-001
titulo: Prevenir eliminación de empleadas
actor: Administrador del sistema
descripcion: 
  Como administrador del sistema,
  quiero que no se permita eliminar empleados de género femenino,
  para cumplir con la normativa interna de no eliminar  registros históricos sensibles.
criterios_aceptacion:
  - Si se intenta eliminar un empleado con género "Femenino", se debe lanzar una excepción o retornar un error controlado.
  - Si el empleado es de género "Masculino" u otro valor, se permite la eliminación normal.
  - El método de eliminación actual  debe ser modificado para incluir esta validación.
  - No debe eliminarse ninguna lógica existente que ya esté implementada en ese método.
  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.
  - La modificación debe estar delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.

id: HDU-EMP-002
titulo: Empleados nacidos antes del 2000
actor: Administrador del sistema
descripcion: 
  Como administrador del sistema
  quiero obtener una lista de empleados que hayan nacido antes del año 2000
  para poder segmentar a los empleados   por generaciones y aplicar políticas diferenciadas
criterios_aceptacion:
  - Se debe crear un nuevo end-point para esta consulta
  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.
  - La modificación debe estar delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.


--- DIAGNÓSTICO Y PLAN DE CLASES ---
--- ANÁLISIS DE CLASES EXISTENTES ---

| Clase Java | Package | Clasificación | Motivo |
|------------|---------|----------------|--------|
| Employee | test.core.api.model | REUTILIZABLE-AS-IS | Contiene atributos `gender` y `birthDate` necesarios para las historias de usuario |
| EmployeeRepository | test.core.api.repository | REUTILIZABLE-AS-IS | Se utiliza para operaciones de base de datos |
| EmployeeCoreApiApplication | test.core.api | REUTILIZABLE-AS-IS | Clase principal de la aplicación |
| EmployeeService | N/A | NUEVA | Se necesita para implementar la lógica de negocio |
| EmployeeController | N/A | NUEVA | Se necesita para exponer los endpoints |
| EmployeeServiceException | N/A | NUEVA | Se necesita para manejar excepciones específicas de la lógica de negocio |
| EmployeeServiceTest | N/A | NUEVA | Se necesita para probar la lógica de negocio |
| EmployeeControllerTest | N/A | NUEVA | Se necesita para probar los endpoints |

--- INSTRUCCIONES DE MODIFICACIÓN ---
- En la clase `EmployeeRepository`, se debe agregar un nuevo método para obtener los empleados nacidos antes del año 2000.
- Se debe crear una nueva clase `EmployeeService` que contenga la lógica de negocio. Esta clase debe tener un método para eliminar empleados que lance una excepción si se intenta eliminar a una empleada mujer. También debe tener un método para obtener los empleados nacidos antes del año 2000.
- Se debe crear una nueva clase `EmployeeController` que exponga los endpoints necesarios para las historias de usuario.
- Se debe crear una nueva clase `EmployeeServiceException` que se utilice para manejar las excepciones específicas de la lógica de negocio.
- Se deben crear clases de prueba `EmployeeServiceTest` y `EmployeeControllerTest` para probar la lógica de negocio y los endpoints, respectivamente.

--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---
- Modifica únicamente las clases marcadas como MODIFICABLE.
- Crea nuevas clases solo si están indicadas como NUEVA.
- No cambies de paquete ni nombre de clase.
- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.
- No omitas lógica existente.
- Cada clase debe comenzar con `package ...`.
- Devuelve únicamente clases y tests JUnit 5 válidos.
- No incluyas explicaciones ni comentarios adicionales.
- Si una clase existente implementa una interfaz, o hereda de otra clase, debes mantener esa declaración `implements o extends ...`.
- No elimines implementaciones de interfaces ya declaradas.
- La firma de las clases y métodos debe mantenerse sin cambio a menos que la nueva funcionalidad lo requiera
- Si se crea una llamada a un método de la clase modificada asegúrate que ese método exista en la clase
- Si se crea una llamada a un método de otra clase asegúrate que ese método exista en la clase o créalo de ser necesario
- Asegurate que el el código generado sea compilable, corríjelo hasta que lo sea
