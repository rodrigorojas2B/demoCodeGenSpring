{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Eres un analista de clases Java que trabaja exclusivamente con los archivos entregados a continuación. No supongas la existencia de clases que no se proporcionan. Si una clase no aparece explícitamente, debe asumirse como no existente. No devuelvas código aún, solo análisis y tabla."
    },
    {
      "role": "user",
      "content": "\n\n--- HISTORIA DE USUARIO ---\nid: HDU-EMP-001\ntitulo: Prevenir eliminación de empleadas\nactor: Administrador del sistema\ndescripcion: \n  Como administrador del sistema,\n  quiero que no se permita eliminar empleados de género femenino,\n  para cumplir con la normativa interna de no eliminar  registros históricos sensibles.\ncriterios_aceptacion:\n  - Si se intenta eliminar un empleado con género \"Femenino\", se debe lanzar una excepción o retornar un error controlado.\n  - Si el empleado es de género \"Masculino\" u otro valor, se permite la eliminación normal.\n  - El método de eliminación actual debe ser modificado para incluir esta validación.\n  - No debe eliminarse ninguna lógica existente que ya esté implementada en ese método.\n  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.\n  - La modificación debe estar delimitada  por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.\n\nid: HDU-EMP-002\ntitulo: Empleados nacidos antes del 2000\nactor: Administrador del sistema\ndescripcion: \n  Como administrador del sistema\n  quiero obtener una lista de empleados que hayan nacido antes del año 2000\n  para poder segmentar a los empleados    por generaciones y aplicar políticas diferenciadas\ncriterios_aceptacion:\n  - Se debe crear un nuevo end-point para esta consulta\n  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.\n  - La modificación debe estar delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.\n\n\n--- CLASES DISPONIBLES EN EL PROYECTO ---\nEmployee\nEmployeeRepository\nEmployeeCoreApiApplication\n\n\n--- CÓDIGO EXISTENTE DEL PROYECTO ---\n\n\n// Archivo: src/main/java/test/core/api/model/Employee.java\n\npackage test.core.api.model;\n\nimport java.io.Serializable;\nimport java.time.LocalDate;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name = \"employee\")\npublic class Employee implements Serializable {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 1L;\n\n\t@Id\n\t@GeneratedValue(strategy = GenerationType.IDENTITY)\n\tprivate Long id;\n\n\tprivate String firstName;\n\tprivate String middleName;\n\tprivate String lastName;\n\tprivate String secondLastName;\n\tprivate Integer age;\n\tprivate String gender;\n\tprivate LocalDate birthDate;\n\tprivate String position;\n\tpublic Long getId() {\n\t\treturn id;\n\t}\n\tpublic void setId(Long id) {\n\t\tthis.id = id;\n\t}\n\tpublic String getFirstName() {\n\t\treturn firstName;\n\t}\n\tpublic void setFirstName(String firstName) {\n\t\tthis.firstName = firstName;\n\t}\n\tpublic String getMiddleName() {\n\t\treturn middleName;\n\t}\n\tpublic void setMiddleName(String middleName) {\n\t\tthis.middleName = middleName;\n\t}\n\tpublic String getLastName() {\n\t\treturn lastName;\n\t}\n\tpublic void setLastName(String lastName) {\n\t\tthis.lastName = lastName;\n\t}\n\tpublic String getSecondLastName() {\n\t\treturn secondLastName;\n\t}\n\tpublic void setSecondLastName(String secondLastName) {\n\t\tthis.secondLastName = secondLastName;\n\t}\n\tpublic Integer getAge() {\n\t\treturn age;\n\t}\n\tpublic void setAge(Integer age) {\n\t\tthis.age = age;\n\t}\n\tpublic String getGender() {\n\t\treturn gender;\n\t}\n\tpublic void setGender(String gender) {\n\t\tthis.gender = gender;\n\t}\n\tpublic LocalDate getBirthDate() {\n\t\treturn birthDate;\n\t}\n\tpublic void setBirthDate(LocalDate birthDate) {\n\t\tthis.birthDate = birthDate;\n\t}\n\tpublic String getPosition() {\n\t\treturn position;\n\t}\n\tpublic void setPosition(String position) {\n\t\tthis.position = position;\n\t}\n\t\n\t\n\t\n\n}\n\n\n// Archivo: src/main/java/test/core/api/repository/EmployeeRepository.java\n\npackage test.core.api.repository;\n\nimport org.springframework.data.repository.PagingAndSortingRepository;\n\nimport test.core.api.model.Employee;\n\npublic interface EmployeeRepository extends PagingAndSortingRepository<Employee, Long> {\n\n    \n}\n\n\n\n\n// Archivo: src/main/java/test/core/api/EmployeeCoreApiApplication.java\n\npackage test.core.api;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.scheduling.annotation.EnableAsync;\n@SpringBootApplication\n@EnableAsync\npublic class EmployeeCoreApiApplication {\n\t\n\t@Autowired\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(EmployeeCoreApiApplication.class, args);\n\t}\n\t\n\t\n}\n\n--- ANÁLISIS DE CLASES EXISTENTES ---\nGenera una tabla Markdown como esta:\n\n| Clase Java | Package | Clasificación | Motivo |\n|------------|---------|----------------|--------|\n| Employee | com.example.EmployeeCoreApi.model | REUTILIZABLE-AS-IS | Contiene atributo `gender` |\n| EmployeeServiceImpl | com.example.EmployeeCoreApi.service.impl | MODIFICABLE | Debe validar antes de borrar |\n| CannotDeleteEmployeeException | com.example.EmployeeCoreApi.exception | NUEVA | Requerida para lanzar excepción |\n| EmployeeServiceImplTest | com.example.EmployeeCoreApi.service.impl | NUEVA | Pruebas unitarias de validación |\n\n--- INSTRUCCIONES DE MODIFICACIÓN ---\n- No eliminar ni reemplazar lógica existente.\n- Si se modifica un método, incluirlo completo con el nuevo código y lo que ya tenía.\n- Solo generar clases nuevas si están indicadas como NUEVA.\n- Cada clase debe estar en su package correcto, según lo indicado en la tabla.\n- NO repetir clases ya existentes si no cambian.\n- NO eliminar los métodos existentes a menos que sea necesario\n- NO reemplazar métodos u otro contenido de las clases existentes por comentarios entre líneas\n- Solo considerar como existente una clase si está listada explícitamente en \"CLASES DISPONIBLES EN EL PROYECTO\".\n- No debes asumir la existencia de clases que no aparecen explícitamente en la sección anterior. Si alguna clase no está listada entre las clases disponibles ni aparece en el código entregado, debe considerarse INEXISTENTE y marcada como NUEVA en el análisis.\n- Si una clase no aparece listada, asumir que es NUEVA.\n- Si una clase herada de otra clase o importa una interfaz propia del proyecto asegúrate que esta esté entre las clases existentes o genera el código respectivo de no existir previamente\n\n--- CÓDIGO A GENERAR ---\nDevuelve solo clases Java válidas. Cada bloque debe comenzar con `package ...`.\nIncluye los tests JUnit5 en el mismo formato si aplica.\n"
    }
  ],
  "temperature": 0.2
}
