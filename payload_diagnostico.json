{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Eres un analizador experto de código Java. Devuelve solo el análisis de clases existentes y el plan de modificación. No devuelvas código aún."
    },
    {
      "role": "user",
      "content": "\n\n--- HISTORIA DE USUARIO ---\nnombre: Obtener empleados nacidos antes del año 2000\ncomo: Administrador del sistema\nquiero: Obtener una lista de empleados que hayan nacido antes del año 2000\npara: Poder segmentar a los empleados   por generaciones y aplicar políticas diferenciadas\n\n--- CÓDIGO EXISTENTE DEL PROYECTO ---\n\n\n// Archivo: src/main/java/test/core/api/model/Employee.java\n\npackage test.core.api.model;\n\nimport java.io.Serializable;\nimport java.time.LocalDate;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name = \"employee\")\npublic class Employee implements Serializable {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 1L;\n\n\t@Id\n\t@GeneratedValue(strategy = GenerationType.IDENTITY)\n\tprivate Long id;\n\n\tprivate String firstName;\n\tprivate String middleName;\n\tprivate String lastName;\n\tprivate String secondLastName;\n\tprivate Integer age;\n\tprivate String gender;\n\tprivate LocalDate birthDate;\n\tprivate String position;\n\tpublic Long getId() {\n\t\treturn id;\n\t}\n\tpublic void setId(Long id) {\n\t\tthis.id = id;\n\t}\n\tpublic String getFirstName() {\n\t\treturn firstName;\n\t}\n\tpublic void setFirstName(String firstName) {\n\t\tthis.firstName = firstName;\n\t}\n\tpublic String getMiddleName() {\n\t\treturn middleName;\n\t}\n\tpublic void setMiddleName(String middleName) {\n\t\tthis.middleName = middleName;\n\t}\n\tpublic String getLastName() {\n\t\treturn lastName;\n\t}\n\tpublic void setLastName(String lastName) {\n\t\tthis.lastName = lastName;\n\t}\n\tpublic String getSecondLastName() {\n\t\treturn secondLastName;\n\t}\n\tpublic void setSecondLastName(String secondLastName) {\n\t\tthis.secondLastName = secondLastName;\n\t}\n\tpublic Integer getAge() {\n\t\treturn age;\n\t}\n\tpublic void setAge(Integer age) {\n\t\tthis.age = age;\n\t}\n\tpublic String getGender() {\n\t\treturn gender;\n\t}\n\tpublic void setGender(String gender) {\n\t\tthis.gender = gender;\n\t}\n\tpublic LocalDate getBirthDate() {\n\t\treturn birthDate;\n\t}\n\tpublic void setBirthDate(LocalDate birthDate) {\n\t\tthis.birthDate = birthDate;\n\t}\n\tpublic String getPosition() {\n\t\treturn position;\n\t}\n\tpublic void setPosition(String position) {\n\t\tthis.position = position;\n\t}\n\t\n\t\n\t\n\n}\n\n\n// Archivo: src/main/java/test/core/api/repository/EmployeeRepository.java\n\npackage test.core.api.repository;\n\nimport org.springframework.data.repository.PagingAndSortingRepository;\n\nimport test.core.api.model.Employee;\n\npublic interface EmployeeRepository extends PagingAndSortingRepository<Employee, Long> {\n\n}\n\n\n\n\n// Archivo: src/main/java/test/core/api/EmployeeCoreApiApplication.java\n\npackage test.core.api;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.scheduling.annotation.EnableAsync;\n@SpringBootApplication\n@EnableAsync\npublic class EmployeeCoreApiApplication {\n\t\n\t@Autowired\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(EmployeeCoreApiApplication.class, args);\n\t}\n\t\n\t\n}\n\n--- ANÁLISIS DE CLASES EXISTENTES ---\nGenera una tabla Markdown como esta:\n\n| Clase Java | Package | Clasificación | Motivo |\n|------------|---------|----------------|--------|\n| Employee | com.example.EmployeeCoreApi.model | REUTILIZABLE-AS-IS | Contiene atributo `gender` |\n| EmployeeServiceImpl | com.example.EmployeeCoreApi.service.impl | MODIFICABLE | Debe validar antes de borrar |\n| CannotDeleteEmployeeException | com.example.EmployeeCoreApi.exception | NUEVA | Requerida para lanzar excepción |\n| EmployeeServiceImplTest | com.example.EmployeeCoreApi.service.impl | NUEVA | Pruebas unitarias de validación |\n\n--- INSTRUCCIONES DE MODIFICACIÓN ---\n- No eliminar ni reemplazar lógica existente.\n- Si se modifica un método, incluirlo completo con el nuevo código y lo que ya tenía.\n- Solo generar clases nuevas si están indicadas como NUEVA.\n- Cada clase debe estar en su package correcto, según lo indicado en la tabla.\n- NO repetir clases ya existentes si no cambian.\n- NO eliminar los métodos existentes a menos que sea necesario\n- NO reemplazar métodos u otro contenido de las clases existentes por comentarios entre líneas\n\n--- CÓDIGO A GENERAR ---\nDevuelve solo clases Java válidas. Cada bloque debe comenzar con `package ...`.\nIncluye los tests JUnit5 en el mismo formato si aplica.\n"
    }
  ],
  "temperature": 0.2
}
