{
  "id": "chatcmpl-BgcEwtT37uPSTEtDyGxAcgQSjgPi4",
  "object": "chat.completion",
  "created": 1749496470,
  "model": "gpt-4-0613",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "package test.core.api.repository;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.stereotype.Repository;\nimport test.core.api.model.Employee;\n\nimport java.util.List;\n\n@Repository\npublic interface EmployeeRepository extends JpaRepository<Employee, Long> {\n\n    // Existing methods ...\n\n    // Start of AI generated code\n    @Query(\"SELECT e FROM Employee e WHERE YEAR(e.birthDate) < 2000\")\n    List<Employee> findEmployeesBornBefore2000();\n    // End of AI generated code\n}\n\npackage test.core.api.service;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport test.core.api.model.Employee;\nimport test.core.api.repository.EmployeeRepository;\nimport test.core.api.service.exceptions.EmployeeServiceException;\n\nimport java.util.List;\n\n@Service\npublic class EmployeeService {\n\n    private final EmployeeRepository employeeRepository;\n\n    @Autowired\n    public EmployeeService(EmployeeRepository employeeRepository) {\n        this.employeeRepository = employeeRepository;\n    }\n\n    public void deleteEmployee(Long id) {\n        Employee employee = employeeRepository.findById(id).orElseThrow(() -> new EmployeeServiceException(\"Employee not found\"));\n\n        if (\"Femenino\".equalsIgnoreCase(employee.getGender())) {\n            throw new EmployeeServiceException(\"Cannot delete female employees\");\n        }\n\n        employeeRepository.deleteById(id);\n    }\n\n    public List<Employee> getEmployeesBornBefore2000() {\n        return employeeRepository.findEmployeesBornBefore2000();\n    }\n}\n\npackage test.core.api.service.exceptions;\n\npublic class EmployeeServiceException extends RuntimeException {\n\n    public EmployeeServiceException(String message) {\n        super(message);\n    }\n}\n\npackage test.core.api.controller;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport test.core.api.model.Employee;\nimport test.core.api.service.EmployeeService;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/employees\")\npublic class EmployeeController {\n\n    private final EmployeeService employeeService;\n\n    @Autowired\n    public EmployeeController(EmployeeService employeeService) {\n        this.employeeService = employeeService;\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> deleteEmployee(@PathVariable Long id) {\n        employeeService.deleteEmployee(id);\n        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n    }\n\n    @GetMapping(\"/born-before-2000\")\n    public ResponseEntity<List<Employee>> getEmployeesBornBefore2000() {\n        List<Employee> employees = employeeService.getEmployeesBornBefore2000();\n        return new ResponseEntity<>(employees, HttpStatus.OK);\n    }\n}\n\npackage test.core.api.service;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport test.core.api.model.Employee;\nimport test.core.api.repository.EmployeeRepository;\nimport test.core.api.service.exceptions.EmployeeServiceException;\n\nimport java.util.Date;\nimport java.util.Optional;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\n@ExtendWith(MockitoExtension.class)\npublic class EmployeeServiceTest {\n\n    @Mock\n    private EmployeeRepository employeeRepository;\n\n    @InjectMocks\n    private EmployeeService employeeService;\n\n    @Test\n    public void testDeleteFemaleEmployee() {\n        Employee employee = new Employee();\n        employee.setGender(\"Femenino\");\n\n        Mockito.when(employeeRepository.findById(Mockito.anyLong())).thenReturn(Optional.of(employee));\n\n        assertThrows(EmployeeServiceException.class, () -> employeeService.deleteEmployee(1L));\n    }\n}\n\npackage test.core.api.controller;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport test.core.api.model.Employee;\nimport test.core.api.service.EmployeeService;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n@ExtendWith(MockitoExtension.class)\npublic class EmployeeControllerTest {\n\n    @Mock\n    private EmployeeService employeeService;\n\n    @InjectMocks\n    private EmployeeController employeeController;\n\n    @Test\n    public void testGetEmployeesBornBefore2000() {\n        Employee employee = new Employee();\n        employee.setBirthDate(new Date(90, 0, 1)); // 1990-01-01\n\n        Mockito.when(employeeService.getEmployeesBornBefore2000()).thenReturn(Arrays.asList(employee));\n\n        List<Employee> employees = employeeController.getEmployeesBornBefore2000().getBody();\n\n        assertEquals(1, employees.size());\n        assertEquals(employee, employees.get(0));\n    }\n}",
        "refusal": null,
        "annotations": []
      },
      "logprobs": null,
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 1313,
    "completion_tokens": 920,
    "total_tokens": 2233,
    "prompt_tokens_details": {
      "cached_tokens": 0,
      "audio_tokens": 0
    },
    "completion_tokens_details": {
      "reasoning_tokens": 0,
      "audio_tokens": 0,
      "accepted_prediction_tokens": 0,
      "rejected_prediction_tokens": 0
    }
  },
  "service_tier": "default",
  "system_fingerprint": null
}
