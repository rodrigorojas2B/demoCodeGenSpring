{
  "id": "chatcmpl-BgcfHM9l7OVb8dSvKArUtKmU1efq8",
  "object": "chat.completion",
  "created": 1749498103,
  "model": "gpt-4-0613",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "package test.core.api.model;\n\nimport java.time.LocalDate;\n\npublic class Employee {\n    private Long id;\n    private String name;\n    private String gender;\n    private LocalDate birthDate;\n\n    // Getters and Setters\n}\n\npackage test.core.api.repository;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\nimport test.core.api.model.Employee;\n\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Repository\npublic interface EmployeeRepository extends JpaRepository<Employee, Long> {\n    List<Employee> findByBirthDateBefore(LocalDate date);\n}\n\npackage test.core.api.exception;\n\npublic class InvalidDeletionException extends RuntimeException {\n    public InvalidDeletionException(String message) {\n        super(message);\n    }\n}\n\npackage test.core.api.service;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport test.core.api.exception.InvalidDeletionException;\nimport test.core.api.model.Employee;\nimport test.core.api.repository.EmployeeRepository;\n\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Service\npublic class EmployeeService {\n\n    @Autowired\n    private EmployeeRepository employeeRepository;\n\n    public void deleteEmployee(Long id) {\n        Employee employee = employeeRepository.findById(id).orElseThrow(() -> new IllegalArgumentException(\"Invalid employee Id:\" + id));\n        if (\"Femenino\".equalsIgnoreCase(employee.getGender())) {\n            throw new InvalidDeletionException(\"Cannot delete female employee\");\n        }\n        employeeRepository.deleteById(id);\n    }\n\n    public List<Employee> getEmployeesBornBefore2000() {\n        return employeeRepository.findByBirthDateBefore(LocalDate.of(2000, 1, 1));\n    }\n}\n\npackage test.core.api.controller;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RestController;\nimport test.core.api.model.Employee;\nimport test.core.api.service.EmployeeService;\n\nimport java.util.List;\n\n@RestController\npublic class EmployeeController {\n\n    @Autowired\n    private EmployeeService employeeService;\n\n    @DeleteMapping(\"/employees/{id}\")\n    public ResponseEntity<Void> deleteEmployee(@PathVariable Long id) {\n        employeeService.deleteEmployee(id);\n        return ResponseEntity.ok().build();\n    }\n\n    @GetMapping(\"/employees/born-before-2000\")\n    public List<Employee> getEmployeesBornBefore2000() {\n        return employeeService.getEmployeesBornBefore2000();\n    }\n}\n\npackage test.core.api.service;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport test.core.api.exception.InvalidDeletionException;\nimport test.core.api.model.Employee;\nimport test.core.api.repository.EmployeeRepository;\n\nimport java.time.LocalDate;\nimport java.util.Arrays;\nimport java.util.Optional;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n@ExtendWith(MockitoExtension.class)\npublic class EmployeeServiceTest {\n\n    @InjectMocks\n    private EmployeeService employeeService;\n\n    @Mock\n    private EmployeeRepository employeeRepository;\n\n    @Test\n    public void testDeleteEmployee() {\n        Employee employee = new Employee();\n        employee.setGender(\"Femenino\");\n\n        Mockito.when(employeeRepository.findById(Mockito.anyLong())).thenReturn(Optional.of(employee));\n\n        assertThrows(InvalidDeletionException.class, () -> {\n            employeeService.deleteEmployee(1L);\n        });\n    }\n\n    @Test\n    public void testGetEmployeesBornBefore2000() {\n        Employee employee = new Employee();\n        employee.setBirthDate(LocalDate.of(1999, 12, 31));\n\n        Mockito.when(employeeRepository.findByBirthDateBefore(Mockito.any())).thenReturn(Arrays.asList(employee));\n\n        assertTrue(employeeService.getEmployeesBornBefore2000().size() > 0);\n    }\n}\n\npackage test.core.api.controller;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.http.ResponseEntity;\nimport test.core.api.model.Employee;\nimport test.core.api.service.EmployeeService;\n\nimport java.time.LocalDate;\nimport java.util.Arrays;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\n@ExtendWith(MockitoExtension.class)\npublic class EmployeeControllerTest {\n\n    @InjectMocks\n    private EmployeeController employeeController;\n\n    @Mock\n    private EmployeeService employeeService;\n\n    @Test\n    public void testDeleteEmployee() {\n        Mockito.doNothing().when(employeeService).deleteEmployee(Mockito.anyLong());\n\n        ResponseEntity<Void> responseEntity = employeeController.deleteEmployee(1L);\n\n        assertEquals(200, responseEntity.getStatusCodeValue());\n    }\n\n    @Test\n    public void testGetEmployeesBornBefore2000() {\n        Employee employee = new Employee();\n        employee.setBirthDate(LocalDate.of(1999, 12, 31));\n\n        Mockito.when(employeeService.getEmployeesBornBefore2000()).thenReturn(Arrays.asList(employee));\n\n        assertEquals(1, employeeController.getEmployeesBornBefore2000().size());\n    }\n}",
        "refusal": null,
        "annotations": []
      },
      "logprobs": null,
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 1357,
    "completion_tokens": 1040,
    "total_tokens": 2397,
    "prompt_tokens_details": {
      "cached_tokens": 0,
      "audio_tokens": 0
    },
    "completion_tokens_details": {
      "reasoning_tokens": 0,
      "audio_tokens": 0,
      "accepted_prediction_tokens": 0,
      "rejected_prediction_tokens": 0
    }
  },
  "service_tier": "default",
  "system_fingerprint": null
}
