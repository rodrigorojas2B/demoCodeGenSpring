{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Eres un generador de código Java. Devuelve solo clases completas, válidas y compilables, siguiendo instrucciones específicas."
    },
    {
      "role": "user",
      "content": "--- PLAN DE CORRECCIÓN ---\nEl log de compilación fallida muestra dos errores principales, ambos en el archivo EmployeeController.java. Aquí está el plan de corrección:\n\n1. Archivo afectado: EmployeeController.java\n   Línea estimada del error: 19\n   Explicación del error: La clase List no se encuentra. En Java, la clase List es parte del paquete java.util, pero parece que no se ha importado en este archivo.\n   Acción de corrección: Importar la clase List del paquete java.util al inicio del archivo EmployeeController.java.\n\n2. Archivo afectado: EmployeeController.java\n   Línea estimada del error: 19\n   Explicación del error: La clase Employee no se encuentra. Aunque la clase Employee existe en el paquete test.core.api.model, no se ha importado en el archivo EmployeeController.java.\n   Acción de corrección: Importar la clase Employee del paquete test.core.api.model al inicio del archivo EmployeeController.java.\n\nPor lo tanto, las acciones de corrección son:\n\n1. Añadir la línea \"import java.util.List;\" al inicio del archivo EmployeeController.java para importar la clase List.\n2. Añadir la línea \"import test.core.api.model.Employee;\" al inicio del archivo EmployeeController.java para importar la clase Employee.\n\nEstas acciones deberían resolver los errores de compilación actuales. Sin embargo, después de realizar estas correcciones, es recomendable volver a compilar el proyecto para asegurarse de que no hay más errores.\n\n--- CÓDIGO ACTUAL CON ERROR ---\n\n\n--- ARCHIVO: src/main/java/test/core/api/model/Employee.java ---\npackage test.core.api.model;\n\nimport java.io.Serializable;\nimport java.time.LocalDate;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name = \"employee\")\npublic class Employee implements Serializable {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 1L;\n\n\t@Id\n\t@GeneratedValue(strategy = GenerationType.IDENTITY)\n\tprivate Long id;\n\n\tprivate String firstName;\n\tprivate String middleName;\n\tprivate String lastName;\n\tprivate String secondLastName;\n\tprivate Integer age;\n\tprivate String gender;\n\tprivate LocalDate birthDate;\n\tprivate String position;\n\tpublic Long getId() {\n\t\treturn id;\n\t}\n\tpublic void setId(Long id) {\n\t\tthis.id = id;\n\t}\n\tpublic String getFirstName() {\n\t\treturn firstName;\n\t}\n\tpublic void setFirstName(String firstName) {\n\t\tthis.firstName = firstName;\n\t}\n\tpublic String getMiddleName() {\n\t\treturn middleName;\n\t}\n\tpublic void setMiddleName(String middleName) {\n\t\tthis.middleName = middleName;\n\t}\n\tpublic String getLastName() {\n\t\treturn lastName;\n\t}\n\tpublic void setLastName(String lastName) {\n\t\tthis.lastName = lastName;\n\t}\n\tpublic String getSecondLastName() {\n\t\treturn secondLastName;\n\t}\n\tpublic void setSecondLastName(String secondLastName) {\n\t\tthis.secondLastName = secondLastName;\n\t}\n\tpublic Integer getAge() {\n\t\treturn age;\n\t}\n\tpublic void setAge(Integer age) {\n\t\tthis.age = age;\n\t}\n\tpublic String getGender() {\n\t\treturn gender;\n\t}\n\tpublic void setGender(String gender) {\n\t\tthis.gender = gender;\n\t}\n\tpublic LocalDate getBirthDate() {\n\t\treturn birthDate;\n\t}\n\tpublic void setBirthDate(LocalDate birthDate) {\n\t\tthis.birthDate = birthDate;\n\t}\n\tpublic String getPosition() {\n\t\treturn position;\n\t}\n\tpublic void setPosition(String position) {\n\t\tthis.position = position;\n\t}\n\t\n\t\n\t\n\n}\n\n--- INSTRUCCIONES ---\nCorrige el código entregado según el plan anterior. Devuelve solo clases Java válidas y listas para compilar.\\n✅ REGLAS ESTRICTAS:\\n1. Modifica exclusivamente las clases indicadas en el plan de corrección.\\n2. No elimines atributos, métodos ni importaciones existentes, a menos que esté explícitamente indicado en el plan.\\n3. Mantén intacta la estructura de cada clase.\\n4. Asegúrate de que cada clase comience con la declaración 'package ...' y contenga imports correctos.\\n5. Si agregas métodos, asegúrate de que sean consistentes con el resto del código.\\n6. No incluyas explicaciones, comentarios, ni formato Markdown. Solo clases completas listas para compilar.\\n"
    }
  ],
  "temperature": 0.3
}
