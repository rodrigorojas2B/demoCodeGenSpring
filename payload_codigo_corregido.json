{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Eres un generador de código Java. Devuelve solo clases completas y compilables."
    },
    {
      "role": "user",
      "content": "--- PLAN DE CORRECCIÓN ---\nEl error de compilación se encuentra en el archivo `EmployeeService.java` en la línea 26. El error es que se está intentando llamar al método `toInstant()` en un objeto de la clase `java.time.LocalDate`, pero este método no existe en esa clase.\n\nPlan de corrección:\n\n1. Archivo: `EmployeeService.java`\n   Línea estimada: 26\n   Explicación: El método `toInstant()` no existe en la clase `java.time.LocalDate`. Parece que el objetivo es convertir la fecha de nacimiento del empleado a un objeto `LocalDate` y luego obtener el año para compararlo con 2000. Sin embargo, `LocalDate` ya tiene un método `getYear()` que puede ser utilizado directamente.\n   Clases relacionadas: `Employee`, `EmployeeRepository`\n   \n   Corrección: En lugar de intentar convertir la fecha de nacimiento a un `Instant`, se puede obtener el año directamente de la fecha de nacimiento utilizando el método `getYear()`. El código debería ser modificado para que la línea 26 se vea así:\n   \n   ```\n   .filter(employee -> employee.getBirthDate().getYear() < 2000)\n   ```\n   \n   Esto filtrará correctamente los empleados que nacieron antes del año 2000.\n\n2. Verificar que no hay otros errores de compilación. Si los hay, repetir el proceso de identificación del error, explicación y corrección.\n\n3. Una vez que todos los errores de compilación hayan sido corregidos, intentar compilar el proyecto nuevamente. Si la compilación es exitosa, entonces el problema ha sido resuelto. Si no, repetir los pasos anteriores.\n\n4. Después de que la compilación sea exitosa, es importante probar la funcionalidad del código para asegurarse de que funciona como se espera. En este caso, se debería probar la funcionalidad de obtener los empleados que nacieron antes del año 2000 para asegurarse de que funciona correctamente.\n\n--- CÓDIGO ACTUAL CON ERROR ---\n\n\n--- ARCHIVO: src/main/java/test/core/api/model/Employee.java ---\npackage test.core.api.model;\n\nimport java.io.Serializable;\nimport java.time.LocalDate;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name = \"employee\")\npublic class Employee implements Serializable {\n\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 1L;\n\n\t@Id\n\t@GeneratedValue(strategy = GenerationType.IDENTITY)\n\tprivate Long id;\n\n\tprivate String firstName;\n\tprivate String middleName;\n\tprivate String lastName;\n\tprivate String secondLastName;\n\tprivate Integer age;\n\tprivate String gender;\n\tprivate LocalDate birthDate;\n\tprivate String position;\n\tpublic Long getId() {\n\t\treturn id;\n\t}\n\tpublic void setId(Long id) {\n\t\tthis.id = id;\n\t}\n\tpublic String getFirstName() {\n\t\treturn firstName;\n\t}\n\tpublic void setFirstName(String firstName) {\n\t\tthis.firstName = firstName;\n\t}\n\tpublic String getMiddleName() {\n\t\treturn middleName;\n\t}\n\tpublic void setMiddleName(String middleName) {\n\t\tthis.middleName = middleName;\n\t}\n\tpublic String getLastName() {\n\t\treturn lastName;\n\t}\n\tpublic void setLastName(String lastName) {\n\t\tthis.lastName = lastName;\n\t}\n\tpublic String getSecondLastName() {\n\t\treturn secondLastName;\n\t}\n\tpublic void setSecondLastName(String secondLastName) {\n\t\tthis.secondLastName = secondLastName;\n\t}\n\tpublic Integer getAge() {\n\t\treturn age;\n\t}\n\tpublic void setAge(Integer age) {\n\t\tthis.age = age;\n\t}\n\tpublic String getGender() {\n\t\treturn gender;\n\t}\n\tpublic void setGender(String gender) {\n\t\tthis.gender = gender;\n\t}\n\tpublic LocalDate getBirthDate() {\n\t\treturn birthDate;\n\t}\n\tpublic void setBirthDate(LocalDate birthDate) {\n\t\tthis.birthDate = birthDate;\n\t}\n\tpublic String getPosition() {\n\t\treturn position;\n\t}\n\tpublic void setPosition(String position) {\n\t\tthis.position = position;\n\t}\n\t\n\t\n\t\n\n}\n\n--- ARCHIVO: src/main/java/test/core/api/repository/EmployeeRepository.java ---\npackage test.core.api.repository;\nimport org.springframework.data.repository.PagingAndSortingRepository;\nimport test.core.api.model.Employee;\nimport java.util.List;\npublic interface EmployeeRepository extends PagingAndSortingRepository<Employee, Long> {\n    @Override\n    List<Employee> findAll();\n}\n\n--- ARCHIVO: src/main/java/test/core/api/EmployeeCoreApiApplication.java ---\npackage test.core.api;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.scheduling.annotation.EnableAsync;\n@SpringBootApplication\n@EnableAsync\npublic class EmployeeCoreApiApplication {\n\t\n\t@Autowired\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(EmployeeCoreApiApplication.class, args);\n\t}\n\t\n\t\n}\n\n--- ARCHIVO: src/main/java/test/core/api/controller/EmployeeController.java ---\npackage test.core.api.controller;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\nimport test.core.api.model.Employee;\nimport test.core.api.service.EmployeeService;\nimport java.util.List;\n@RestController\n@RequestMapping(\"/api/employees\")\npublic class EmployeeController {\n    @Autowired\n    private EmployeeService employeeService;\n    @DeleteMapping(\"/{id}\")\n    public void deleteEmployee(@PathVariable Long id) {\n        employeeService.deleteEmployee(id);\n    }\n    @GetMapping(\"/born-before-2000\")\n    public List<Employee> getEmployeesBornBefore2000() {\n        return employeeService.getEmployeesBornBefore2000();\n    }\n}\n\n--- ARCHIVO: src/main/java/test/core/api/service/EmployeeService.java ---\npackage test.core.api.service;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport test.core.api.model.Employee;\nimport test.core.api.repository.EmployeeRepository;\nimport test.core.api.exception.CannotDeleteEmployeeException;\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.util.List;\nimport java.util.stream.Collectors;\n@Service\npublic class EmployeeService {\n    @Autowired\n    private EmployeeRepository employeeRepository;\n    public void deleteEmployee(Long id) {\n        Employee employee = employeeRepository.findById(id).orElse(null);\n        if (employee != null) {\n            if (\"Femenino\".equals(employee.getGender())) {\n                throw new CannotDeleteEmployeeException(\"No se puede eliminar un empleado de género femenino\");\n            }\n            employeeRepository.delete(employee);\n        }\n    }\n    public List<Employee> getEmployeesBornBefore2000() {\n        return employeeRepository.findAll().stream()\n                .filter(employee -> employee.getBirthDate().toInstant()\n                        .atZone(ZoneId.systemDefault())\n                        .toLocalDate().getYear() < 2000)\n                .collect(Collectors.toList());\n    }\n}\n\n--- ARCHIVO: src/main/java/test/core/api/exception/CannotDeleteEmployeeException.java ---\npackage test.core.api.exception;\npublic class CannotDeleteEmployeeException extends RuntimeException {\n    public CannotDeleteEmployeeException(String message) {\n        super(message);\n    }\n}\n\n--- INSTRUCCIONES ---\nCorrige el código según el plan. Devuelve solo clases completas y compilables.\\n✅ REGLAS:\\n1. Modifica exclusivamente las clases indicadas.\\n2. No elimines atributos ni métodos existentes, salvo que esté indicado.\\n3. Cada clase debe comenzar con 'package ...' y tener imports válidos.\\n4. No entregues comentarios, explicaciones, ni bloques Markdown.\\n5. Devuelve únicamente el código fuente válido, sin encabezados.\\n"
    }
  ],
  "temperature": 0.3
}
