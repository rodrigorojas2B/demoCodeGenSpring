{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Eres un generador de código Java experto en Spring Boot. Tu salida debe contener únicamente código fuente Java completamente válido. Cada clase debe comenzar con 'package ...' y contener la declaración completa de la clase (public class, interface o enum). No debes escribir ningún texto explicativo, encabezado, numeración, ni comentarios como '1.', '2.', 'Test Unitario:', etc. Si la clase ya existe en el repositorio, debes conservar su package original y todos sus métodos, incluso si no se modifican. No puedes inventar nuevos packages como 'com.example.demo'. Si una clase es nueva, debe estar marcada como NUEVA en el análisis previo. No escribas ningún contenido fuera de los bloques de código. El resultado debe ser compilable sin errores ni contenido basura."
    },
    {
      "role": "user",
      "content": "--- HISTORIA DE USUARIO ---\nnombre: Obtener empleados nacidos antes del año 2000\ncomo: Administrador del sistema\nquiero: Obtener una lista de empleados que hayan nacido antes del año 2000\npara: Poder segmentar a los empleados   por generaciones y aplicar políticas diferenciadas\n\n--- DIAGNÓSTICO Y PLAN DE CLASES ---\n--- ANÁLISIS DE CLASES EXISTENTES ---\n\n| Clase Java | Package | Clasificación | Motivo |\n|------------|---------|----------------|--------|\n| Employee | test.core.api.model | REUTILIZABLE-AS-IS | Contiene atributo `birthDate` necesario para la nueva funcionalidad |\n| EmployeeRepository | test.core.api.repository | MODIFICABLE | Se necesita agregar un nuevo método para obtener empleados nacidos antes del año 2000 |\n| EmployeeCoreApiApplication | test.core.api | REUTILIZABLE-AS-IS | Clase principal de la aplicación, no necesita modificaciones para esta funcionalidad |\n\n--- PLAN DE MODIFICACIÓN ---\n\n1. Clase `EmployeeRepository` (test.core.api.repository): Se necesita agregar un nuevo método para obtener los empleados que nacieron antes del año 2000. Este método debe devolver una lista de empleados y aceptar un parámetro de tipo `LocalDate` que represente la fecha límite (01-01-2000).\n\n2. Crear una nueva clase `EmployeeService` (test.core.api.service): Esta clase debe contener la lógica de negocio para obtener los empleados que nacieron antes del año 2000. Debe tener un método que utilice el nuevo método del repositorio `EmployeeRepository`.\n\n3. Crear una nueva clase `EmployeeController` (test.core.api.controller): Esta clase debe manejar las solicitudes HTTP para obtener los empleados que nacieron antes del año 2000. Debe tener un método que mapee a una URL específica y que utilice el método del servicio `EmployeeService`.\n\n4. Crear una nueva clase `EmployeeServiceTest` (test.core.api.service): Esta clase debe contener las pruebas unitarias para el servicio `EmployeeService`. Debe probar que el método del servicio devuelve los resultados esperados.\n\n5. Crear una nueva clase `EmployeeControllerTest` (test.core.api.controller): Esta clase debe contener las pruebas unitarias para el controlador `EmployeeController`. Debe probar que el método del controlador devuelve los resultados esperados y maneja correctamente las solicitudes HTTP.\n\n--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---\n- Modifica únicamente las clases marcadas como MODIFICABLE.\n- Crea nuevas clases solo si están indicadas como NUEVA.\n- No cambies de paquete ni nombre de clase.\n- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.\n- No omitas lógica existente.\n- Cada clase debe comenzar con `package ...`.\n- Devuelve únicamente clases y tests JUnit 5 válidos.\n- No incluyas explicaciones ni comentarios adicionales.\n- Si una clase existente implementa una interfaz, o hereda de otra clase, debes mantener esa declaración `implements o extends ...`.\n- No elimines implementaciones de interfaces ya declaradas.\n- La firma de las clases y métodos debe mantenerse sin cambio a menos que la nueva funcionalidad lo requiera\n\n"
    }
  ],
  "temperature": 0.3
}
