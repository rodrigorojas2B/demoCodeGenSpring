{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Eres un generador de código Java experto en Spring Boot. Tu salida debe contener únicamente código fuente Java completamente válido. Cada clase debe comenzar con 'package ...' y contener la declaración completa de la clase (public class, interface o enum). No debes escribir ningún texto explicativo, encabezado, numeración, ni comentarios como '1.', '2.', 'Test Unitario:', etc. Si la clase ya existe en el repositorio, debes conservar su package original y todos sus métodos, incluso si no se modifican. No puedes inventar nuevos packages como 'com.example.demo'. Si una clase es nueva, debe estar marcada como NUEVA en el análisis previo. No escribas ningún contenido fuera de los bloques de código. El resultado debe ser compilable sin errores ni contenido basura."
    },
    {
      "role": "user",
      "content": "--- HISTORIA DE USUARIO ---\nid: HDU-EMP-003\ntitulo: Prevenir eliminación de empleadas\nactor: Administrador del sistema\ndescripcion: >\n  Como administrador del sistema,\n  quiero que no se permita eliminar empleados de género femenino,\n  para cumplir con la normativa  interna de no eliminar registros históricos sensibles.\n\ncriterios_aceptacion:\n  - Si se intenta eliminar un empleado con género \"Femenino\", se debe lanzar una excepción o retornar un error controlado.\n  - Si el empleado es de género \"Masculino\" u otro valor, se permite la eliminación normal.\n  - El método de eliminación actual debe ser modificado para incluir esta validación.\n  - No debe eliminarse ninguna lógica existente que ya esté implementada en ese método.\n  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.\n  - La modificación debe estar delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.\n\n\n--- DIAGNÓSTICO Y PLAN DE CLASES ---\n--- ANÁLISIS DE CLASES EXISTENTES ---\n\n| Clase Java | Package | Clasificación | Motivo |\n|------------|---------|----------------|--------|\n| Employee | test.core.api.model | REUTILIZABLE-AS-IS | Contiene atributo `gender` |\n| EmployeeRepository | test.core.api.repository | REUTILIZABLE-AS-IS | Se utiliza para operaciones CRUD en la base de datos |\n| EmployeeCoreApiApplication | test.core.api | REUTILIZABLE-AS-IS | Clase principal de la aplicación |\n| EmployeeService | (No existe aún) | NUEVA | Se necesita para implementar la lógica de negocio |\n| CannotDeleteFemaleEmployeeException | (No existe aún) | NUEVA | Se necesita para lanzar una excepción específica cuando se intenta eliminar un empleado femenino |\n\n--- PLAN DE MODIFICACIÓN ---\n\n1. Crear una nueva interfaz `EmployeeService` en el paquete `test.core.api.service`. Esta interfaz debe tener un método `deleteEmployee(Long id)`.\n\n2. Crear una nueva clase `EmployeeServiceImpl` en el paquete `test.core.api.service.impl` que implemente la interfaz `EmployeeService`. En el método `deleteEmployee(Long id)`, se debe recuperar el empleado por su id utilizando `EmployeeRepository`. Luego, se debe verificar el género del empleado. Si es femenino, se debe lanzar una nueva excepción `CannotDeleteFemaleEmployeeException`. Si no es femenino, se puede eliminar el empleado utilizando `EmployeeRepository`.\n\n3. Crear una nueva clase de excepción `CannotDeleteFemaleEmployeeException` en el paquete `test.core.api.exception`. Esta excepción debe extender `RuntimeException` y tener un constructor que acepte un mensaje de error.\n\n4. Crear una nueva clase `EmployeeServiceTest` en el paquete `test.core.api.service.impl` para probar la lógica de `EmployeeServiceImpl`. Se deben crear pruebas para verificar que se lanza la excepción `CannotDeleteFemaleEmployeeException` cuando se intenta eliminar un empleado femenino y que se puede eliminar un empleado no femenino.\n\n5. Modificar la clase `EmployeeCoreApiApplication` para inyectar `EmployeeService` y utilizarlo para eliminar empleados en lugar de `EmployeeRepository` directamente.\n\n--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---\n- Modifica únicamente las clases marcadas como MODIFICABLE.\n- Crea nuevas clases solo si están indicadas como NUEVA.\n- No cambies de paquete ni nombre de clase.\n- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.\n- No omitas lógica existente.\n- Cada clase debe comenzar con `package ...`.\n- Devuelve únicamente clases y tests JUnit 5 válidos.\n- No incluyas explicaciones ni comentarios adicionales.\n- Si una clase existente implementa una interfaz, o hereda de otra clase, debes mantener esa declaración `implements o extends ...`.\n- No elimines implementaciones de interfaces ya declaradas.\n- La firma de las clases y métodos debe mantenerse sin cambio a menos que la nueva funcionalidad lo requiera\n\n"
    }
  ],
  "temperature": 0.3
}
