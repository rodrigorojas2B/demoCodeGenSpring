{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Eres un generador de código Java experto en Spring Boot. Tu salida debe contener únicamente código fuente Java completamente válido. Cada clase debe comenzar con 'package ...' y contener la declaración completa de la clase (public class, interface o enum). No debes escribir ningún texto explicativo, encabezado, numeración, ni comentarios como '1.', '2.', 'Test Unitario:', etc. Si la clase ya existe en el repositorio, debes conservar su package original y todos sus métodos, incluso si no se modifican. No puedes inventar nuevos packages como 'com.example.demo'. Si una clase es nueva, debe estar marcada como NUEVA en el análisis previo. No escribas ningún contenido fuera de los bloques de código. El resultado debe ser compilable sin errores ni contenido basura."
    },
    {
      "role": "user",
      "content": "--- HISTORIA DE USUARIO ---\nid: HDU-EMP-001\ntitulo: Prevenir eliminación de empleadas\nactor: Administrador del sistema\ndescripcion: \n  Como administrador del sistema,\n  quiero que no se permita eliminar empleados de género femenino,\n  para cumplir con la normativa interna de no eliminar  registros históricos sensibles.\ncriterios_aceptacion:\n  - Si se intenta eliminar un empleado con género \"Femenino\", se debe lanzar una excepción o retornar un error controlado.\n  - Si el empleado es de género \"Masculino\" u otro valor, se permite la eliminación normal.\n  - El método de eliminación actual debe ser modificado para incluir esta validación.\n  - No debe eliminarse ninguna lógica existente que ya esté implementada en ese método.\n  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.\n  - La modificación debe estar delimitada  por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.\n\nid: HDU-EMP-002\ntitulo: Empleados nacidos antes del 2000\nactor: Administrador del sistema\ndescripcion: \n  Como administrador del sistema\n  quiero obtener una lista de empleados que hayan nacido antes del año 2000\n  para poder segmentar a los empleados    por generaciones y aplicar políticas diferenciadas\ncriterios_aceptacion:\n  - Se debe crear un nuevo end-point para esta consulta\n  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.\n  - La modificación debe estar delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.\n\n\n--- DIAGNÓSTICO Y PLAN DE CLASES ---\n--- ANÁLISIS DE CLASES EXISTENTES ---\nGenera una tabla Markdown como esta:\n\n| Clase Java | Package | Clasificación | Motivo |\n|------------|---------|----------------|--------|\n| Employee | test.core.api.model | REUTILIZABLE-AS-IS | Contiene atributo `gender` y `birthDate` necesarios para las historias de usuario |\n| EmployeeRepository | test.core.api.repository | REUTILIZABLE-AS-IS | Se necesita para realizar operaciones CRUD en la base de datos |\n| EmployeeCoreApiApplication | test.core.api | REUTILIZABLE-AS-IS | Clase principal de la aplicación |\n| EmployeeService | NUEVA | NUEVA | Se necesita para implementar la lógica de negocio |\n| EmployeeController | NUEVA | NUEVA | Se necesita para exponer los endpoints de la API |\n| CannotDeleteEmployeeException | NUEVA | NUEVA | Se necesita para lanzar una excepción cuando se intenta eliminar un empleado femenino |\n| EmployeeServiceTest | NUEVA | NUEVA | Se necesita para realizar pruebas unitarias de la lógica de negocio |\n| EmployeeControllerTest | NUEVA | NUEVA | Se necesita para realizar pruebas de los endpoints de la API |\n\n--- INSTRUCCIONES DE MODIFICACIÓN ---\n- No eliminar ni reemplazar lógica existente.\n- Si se modifica un método, incluirlo completo con el nuevo código y lo que ya tenía.\n- Solo generar clases nuevas si están indicadas como NUEVA.\n- Cada clase debe estar en su package correcto, según lo indicado en la tabla.\n- NO repetir clases ya existentes si no cambian.\n- NO eliminar los métodos existentes a menos que sea necesario\n- NO reemplazar métodos u otro contenido de las clases existentes por comentarios entre líneas\n- Solo considerar como existente una clase si está listada explícitamente en \"CLASES DISPONIBLES EN EL PROYECTO\".\n- No debes asumir la existencia de clases que no aparecen explícitamente en la sección anterior. Si alguna clase no está listada entre las clases disponibles ni aparece en el código entregado, debe considerarse INEXISTENTE y marcada como NUEVA en el análisis.\n- Si una clase no aparece listada, asumir que es NUEVA.\n- Si una clase herada de otra clase o importa una interfaz propia del proyecto asegúrate que esta esté entre las clases existentes o genera el código respectivo de no existir previamente\n\n--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---\n- Modifica únicamente las clases marcadas como MODIFICABLE.\n- Crea nuevas clases solo si están indicadas como NUEVA.\n- No cambies de paquete ni nombre de clase.\n- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.\n- No omitas lógica existente.\n- Cada clase debe comenzar con `package ...`.\n- Devuelve únicamente clases y tests JUnit 5 válidos.\n- No incluyas explicaciones ni comentarios adicionales.\n- Si una clase existente implementa una interfaz, o hereda de otra clase, debes mantener esa declaración `implements o extends ...`.\n- No elimines implementaciones de interfaces ya declaradas.\n- La firma de las clases y métodos debe mantenerse sin cambio a menos que la nueva funcionalidad lo requiera\n- Si se crea una llamada a un método de la clase modificada asegúrate que ese método exista en la clase\n- Si se crea una llamada a un método de otra clase asegúrate que ese método exista en la clase o créalo de ser necesario\n- Asegurate que el el código generado sea compilable, corríjelo hasta que lo sea\n"
    }
  ],
  "temperature": 0.3
}
