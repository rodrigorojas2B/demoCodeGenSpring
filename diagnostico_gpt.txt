--- ANÁLISIS DE CLASES EXISTENTES ---

| Clase Java | Package | Clasificación | Motivo |
|------------|---------|----------------|--------|
| Employee | test.core.api.model | REUTILIZABLE-AS-IS | Contiene atributo `birthDate` necesario para la nueva funcionalidad |
| EmployeeRepository | test.core.api.repository | MODIFICABLE | Se necesita agregar un nuevo método para obtener empleados nacidos antes del año 2000 |
| EmployeeCoreApiApplication | test.core.api | REUTILIZABLE-AS-IS | Clase principal de la aplicación, no necesita modificaciones para esta funcionalidad |

--- PLAN DE MODIFICACIÓN ---

1. Clase `EmployeeRepository` (test.core.api.repository): Se necesita agregar un nuevo método para obtener los empleados que nacieron antes del año 2000. Este método debe devolver una lista de empleados y aceptar un parámetro de tipo `LocalDate` que represente la fecha límite (01-01-2000).

2. Crear una nueva clase `EmployeeService` (test.core.api.service): Esta clase debe contener la lógica de negocio para obtener los empleados que nacieron antes del año 2000. Debe tener un método que utilice el nuevo método del repositorio `EmployeeRepository`.

3. Crear una nueva clase `EmployeeController` (test.core.api.controller): Esta clase debe manejar las solicitudes HTTP para obtener los empleados que nacieron antes del año 2000. Debe tener un método que mapee a una URL específica y que utilice el método del servicio `EmployeeService`.

4. Crear una nueva clase `EmployeeServiceTest` (test.core.api.service): Esta clase debe contener las pruebas unitarias para el servicio `EmployeeService`. Debe probar que el método del servicio devuelve los resultados esperados.

5. Crear una nueva clase `EmployeeControllerTest` (test.core.api.controller): Esta clase debe contener las pruebas unitarias para el controlador `EmployeeController`. Debe probar que el método del controlador devuelve los resultados esperados y maneja correctamente las solicitudes HTTP.
