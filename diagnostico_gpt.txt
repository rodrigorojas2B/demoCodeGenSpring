--- ANÁLISIS DE CLASES EXISTENTES ---

| Clase Java | Package | Clasificación | Motivo |
|------------|---------|----------------|--------|
| Employee | test.core.api.model | REUTILIZABLE-AS-IS | Contiene atributos necesarios para las historias de usuario |
| EmployeeRepository | test.core.api.repository | REUTILIZABLE-AS-IS | Se necesita para realizar operaciones CRUD en la base de datos |
| EmployeeCoreApiApplication | test.core.api | REUTILIZABLE-AS-IS | Clase principal de la aplicación |
| EmployeeService | N/A | NUEVA | Se necesita para implementar la lógica de negocio |
| EmployeeController | N/A | NUEVA | Se necesita para exponer los endpoints requeridos |
| EmployeeServiceException | N/A | NUEVA | Se necesita para manejar excepciones personalizadas |
| EmployeeServiceTest | N/A | NUEVA | Se necesita para realizar pruebas unitarias |
| EmployeeControllerTest | N/A | NUEVA | Se necesita para realizar pruebas de integración |

--- INSTRUCCIONES DE MODIFICACIÓN ---
1. Crear la clase `EmployeeService` en el paquete `test.core.api.service` con los métodos `deleteEmployee(Long id)`, `getEmployeesBornBefore2000()`, y `getEmployeesGroupedByPosition()`.
2. Modificar el método `deleteEmployee(Long id)` para lanzar una excepción `EmployeeServiceException` si el empleado a eliminar es de género femenino.
3. Crear la clase `EmployeeController` en el paquete `test.core.api.controller` con los endpoints `deleteEmployee(Long id)`, `getEmployeesBornBefore2000()`, y `getEmployeesGroupedByPosition()`.
4. Crear la clase `EmployeeServiceException` en el paquete `test.core.api.exception` para manejar las excepciones personalizadas.
5. Crear la clase `EmployeeServiceTest` en el paquete `test.core.api.service` para realizar pruebas unitarias en los métodos de `EmployeeService`.
6. Crear la clase `EmployeeControllerTest` en el paquete `test.core.api.controller` para realizar pruebas de integración en los endpoints de `EmployeeController`.
